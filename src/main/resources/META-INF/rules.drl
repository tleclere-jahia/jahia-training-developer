package org.foo.modules.jahia.rules

// list any import classes here.
import org.jahia.services.content.rules.*
import org.jahia.services.content.JCRContentUtils
import org.slf4j.Logger

expander rules.dsl

// declare any global variables here
global User user
global Service service
global Logger logger
global JCRContentUtils jcrUtils

rule "Update page pending modifications"
    when
        A node is published
    then
        Log "Update page pending modifications"
        Execute the action "newpublication" now on the node
end

rule "Increment counter"
    when
        A node is published
        - the node has the type foomix:simpleItem
    then
        Log "Increment counter"
        Execute the action "increment" now on the node
>       if(node.getNode().getResolveSite().hasNode("counter")) node.getNode().setProperty("itemNumber", node.getNode().getResolveSite().getNode("counter").getProperty("count").getLong());
        Log "Item number #" + node.getNode().getPropertyAsString("itemNumber")
end

rule "Auto create table rows"
    when
        Not in operation import
        A new node is created
        - the node has the type foont:table
        The node has a property nbRows
    then
        Log "Create " + Long.valueOf(property.getStringValue()) + " rows under table " + property.getNode().getPath()
>       int i = 0; while(i++ < Long.valueOf(property.getStringValue()))
>           new AddedNodeFact(node, "trow", "foont:trow", drools, true);
end

rule "Auto create table row cells"
    when
        Not in operation import
        A new node is created
        - the node has the type foont:trow
        - the parent has the type foont:table
        The node has a parent
    then
        Log "Auto create cells for row " + node.getPath()
>       int i = 0; long nbHeaders = parent.getNode("header").getNumberOfChildren(); while(i++ < nbHeaders) {
>           AddedNodeFact cell = new AddedNodeFact(node, "cell", "foont:tcell", drools, true);
>           cell.getNode().setProperty("type", "foomix:tCellTextType");
>           cell.addType("foomix:tCellTextType", drools);
>       }
end

rule "Auto set j:view"
    when
        A property view has been set on a node
        - the node has the type foont:card
        - not in operation import
    then
        Add the type jmix:renderable
        Set the property j:view of the node with the value of propertyValue.get(0)
end

rule "Auto remove j:view"
    when
        A property view has been removed from a node
        - the node has the type foont:card
        - the node has the type jmix:renderable
        - not in operation import
    then
        Remove the type jmix:renderable
end
